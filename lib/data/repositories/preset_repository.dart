import '../../data/models/preset_model.dart';
import '../../data/models/project_row_model.dart';
import '../../core/services/local_storage_service.dart';

/// Repository for managing presets
/// Handles CRUD operations with local storage
class PresetRepository {
  final LocalStorageService _storageService;
  static const String _presetsKey = 'presets';

  PresetRepository(this._storageService);

  /// Get all presets
  Future<List<PresetModel>> getAllPresets() async {
    try {
      final presets = await _storageService.getPresets();
      if (presets.isEmpty) {
        return _getDefaultPresets();
      }
      return presets;
    } catch (e) {
      // Return default presets if there's an error
      return _getDefaultPresets();
    }
  }

  /// Get preset by ID
  Future<PresetModel?> getPresetById(String id) async {
    final presets = await getAllPresets();
    return presets.where((preset) => preset.id == id).firstOrNull;
  }

  /// Create a new preset
  Future<PresetModel> createPreset({
    required String name,
    String? description,
    required List<ProjectRowModel> rows,
  }) async {
    final preset = PresetModel(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      name: name,
      description: description ?? '',
      defaultRows: rows,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    final presets = await getAllPresets();
    presets.add(preset);
    await _savePresets(presets);

    return preset;
  }

  /// Update an existing preset
  Future<void> updatePreset(PresetModel preset) async {
    final presets = await getAllPresets();
    final index = presets.indexWhere((p) => p.id == preset.id);

    if (index != -1) {
      presets[index] = preset;
      await _savePresets(presets);
    }
  }

  /// Delete a preset
  Future<void> deletePreset(String id) async {
    final presets = await getAllPresets();
    presets.removeWhere((preset) => preset.id == id);
    await _savePresets(presets);
  }

  /// Check if preset name exists
  Future<bool> presetNameExists(String name, {String? excludeId}) async {
    final presets = await getAllPresets();
    return presets.any((preset) =>
        preset.name.toLowerCase() == name.toLowerCase() &&
        preset.id != excludeId);
  }

  /// Save presets to storage
  Future<void> _savePresets(List<PresetModel> presets) async {
    for (final preset in presets) {
      await _storageService.savePreset(preset);
    }
  }

  /// Get default presets
  List<PresetModel> _getDefaultPresets() {
    return [
      PresetModel(
        id: 'default_solar_5kw',
        name: '5kW Solar System',
        description: 'Standard 5kW grid-tied solar system',
        defaultRows: [
          ProjectRowModel(
            id: '1',
            quantity: 15,
            unit: 'pcs',
            description: 'Solar Panels (400W)',
            estimatedPrice: 8500.0,
            isAutoGenerated: true,
            category: 'solar_panels',
          ),
          ProjectRowModel(
            id: '2',
            quantity: 1,
            unit: 'unit',
            description: '5kW Inverter',
            estimatedPrice: 45000.0,
            isAutoGenerated: true,
            category: 'inverter',
          ),
          ProjectRowModel(
            id: '3',
            quantity: 1,
            unit: 'lot',
            description: 'Installation & Mounting',
            estimatedPrice: 25000.0,
            isAutoGenerated: true,
            category: 'installation',
          ),
        ],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        isDefault: true,
      ),
      PresetModel(
        id: 'default_solar_10kw',
        name: '10kW Solar System',
        description: 'Standard 10kW grid-tied solar system',
        defaultRows: [
          ProjectRowModel(
            id: '1',
            quantity: 30,
            unit: 'pcs',
            description: 'Solar Panels (400W)',
            estimatedPrice: 8500.0,
            isAutoGenerated: true,
            category: 'solar_panels',
          ),
          ProjectRowModel(
            id: '2',
            quantity: 1,
            unit: 'unit',
            description: '10kW Inverter',
            estimatedPrice: 75000.0,
            isAutoGenerated: true,
            category: 'inverter',
          ),
          ProjectRowModel(
            id: '3',
            quantity: 1,
            unit: 'lot',
            description: 'Installation & Mounting',
            estimatedPrice: 40000.0,
            isAutoGenerated: true,
            category: 'installation',
          ),
        ],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        isDefault: true,
      ),
    ];
  }
}
